""""""""""""""""""""""""
" Jim's vimrc file
""""""""""""""""""""""""

" This must be first, because it changes other options as a side effect.
set nocompatible

behave mswin

set nobackup
set noswapfile


set autoindent		" always set autoindenting on
set autowrite       " Write buffers automatically if necessary
set backspace=indent,eol,start
set cmdheight=2     " Command window is 2 lines high. prevents "hit enter to continue" messages

"if  has("gui_running")
""set macmeta
set columns=110     " number of columns
set lines=50        " window height
"endif

set expandtab       " expand tabs to spaces
set guifont=monospace


set noantialias
set history=50		" keep 50 lines of command line history
set ic              " ignore case on searches
set incsearch		" do incremental searching
set laststatus=2    " always show a status line
set nobackup		" don't neeed no stinkin backup
set nowrap          " don't wrap lines
set ruler		    " show the cursor position all the time
set selectmode=key  " mouse select will use visual mode, not select mode
set shiftwidth=4    " autoindent size
set showcmd		    " display incomplete commands
set showmatch       " show search matches
set nohls           " highlight search matches
set tabstop=4       " number of spaces per tab
set tags=~/p4/tags  " location of our tag file (generated by ctags.exe)
set textwidth=0     " 
set vb              " Visual bell. Flash screen on error.
set winaltkeys=no   " No Alt-shortcuts for Windows (Vim gets all Alt keys)
set viminfo+=%      " Save/restore buffers
set cb=unnamed      " Use Windows cut/paste buffer
set guioptions=gmrLb
set hidden
set shell=bash\ --login

"let vimclojure#WantNailgun=1
"let vimclojure#NailgunClient = "/Users/jvandonsel/.vim/vimclojure-2.1.2/ng"

set diffopt+=iwhite " ignore whitespace in gvimdiff

" Omni Completion
set completeopt="menu,preview"
set nocp
filetype plugin on

let g:p4EnableMenu=1
let g:p4EnablePopupMenu=1
let g:p4ClientRoot = "~/p4/"
let g:p4PromptToCheckout = 0   " I've seen crashes with this turned on
"runtime perforce/perforceutils.vim
"runtime perforce/perforcemenu.vim

if  !has("gui_running")
autocmd InsertEnter * set cursorline 
autocmd InsertLeave * set nocursorline 
endif


let g:Tlist_Ctags_Cmd="ctags"

" Bufexplorer opens file in existing window
let g:bufExplorerOpenMode = 1

" showmarks settings
let g:showmarks_include="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"


" Use f as the prefix for the empty register
noremap f "_

" In visual mode, a paste will delete existing text to the bit bucket. 
" This makes pasting the same source to multiple destinations easier.
vmap p "_dP

" Allow paste in all modes with <c-p>
map <c-p> p
imap <c-p> <c-o>h <c-o>p


" Use ctrl-s as save. This will also work in insert mode.
map <silent> <c-s> :if expand("%") == ""<CR>:browse confirm w<CR>:else<CR>:confirm w<CR>:endif<CR>
imap <c-s> <esc><c-s>

" Alt-d is the old Brief keymap for delete lines
map <m-d> dd
imap <m-d> <c-o>dd

" Alt-n is the old Brief keymap for next buffer
map <m-n> :bn<CR>

" Alt-p is the old Brief keymap for previous buffer
map <m-p> :bp<CR>

" Ctrl-- is the old Brief keymap for delete buffer
map <c-_> :bd<CR>
map - :bd<CR>

" Ctrl-B for buffer list
map <c-b> <Plug>SelectBuf<CR>

" Use emacs home/end keys
"map <C-A> <HOME>
"map <C-E> <END>
"map! <C-A> <HOME>
"map! <C-E> <END>

" Mapping the arrow keys like this allow you to use them in visual mode
" (I don't know why this is necessary)
map <up> k
map <down> j
map <left> h
map <right> l

"Disable middle mouse (scroll click)
map <MiddleMouse> <nop>
map <2-MiddleMouse> <nop>
map <3-MiddleMouse> <nop>
imap <MiddleMouse> <nop>
imap <2-MiddleMouse> <nop>
imap <3-MiddleMouse> <nop>

" I am constantly leaving CAPS LOCK on accidentally. Removing some seldom used upper case
" commands helps. The <esc> on the end forces an error beep or screen flash.
map J :echo "*** Use CTRL-j for 'Join' ***"<cr><esc>
map K :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map C :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
"map H :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>  !!MAPPING H SEEMS TO "SCREW UP CURSOR ON WRITES!
map X :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map L :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map O :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map W :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map M :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
vmap Y :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map Y :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map U :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
map B :echo "*** YOUR CAPS LOCK IS PROBABLY ON ***"<cr><esc>
"The only one of these that is really useful is J for join. Remap this as <ctrl-j>
noremap <c-j> J

" Don't use Ex mode, use Q for formatting
map Q gq

" Open file explorer with F4
"map <F4> :NERDTreeToggle<CR>
map <F4> :Ex<CR>

" Open buffer explorer with Alt-B or F3
map <M-b> :BufExplorer<CR>
map <F3> :BufExplorer<CR>

" Open tag explorer with F8
noremap <silent> <F8> :Tlist<CR>

"Grep
map <a-g> :Rgrep<CR>


" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " For all text files set 'textwidth' to 78 characters.
  """'"autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
endif " has("autocmd")

set background=light
hi clear
if exists("syntax_on")
  syntax reset
endif

syntax on 

if has("gui_running")

hi Normal ctermfg=White guifg=black guibg=White ctermbg=Black

" Groups used in the 'highlight' and 'guicursor' options default value.
hi ErrorMsg term=standout ctermbg=DarkRed ctermfg=White guibg=Red guifg=White
hi IncSearch term=reverse cterm=reverse gui=reverse
hi StatusLine term=reverse cterm=reverse gui=underline guifg=Black guibg=Grey
hi StatusLineNC term=reverse cterm=reverse gui=underline guifg=LightGrey guibg=DarkGrey
hi VertSplit term=reverse cterm=reverse gui=NONE guifg=Grey guibg=Grey
hi Visual term=reverse cterm=reverse gui=reverse guifg=Grey guibg=fg
hi VisualNOS term=underline cterm=underline gui=underline
hi DiffText term=reverse ctermbg=Red guibg=Red
hi Cursor ctermbg=Black guibg=#808080 guifg=White
hi lCursor guibg=Cyan guifg=Black
hi Directory ctermfg=LightRed guifg=Red
hi LineNr term=underline ctermfg=Yellow guifg=Yellow
hi MoreMsg ctermfg=LightGreen guifg=SeaGreen
hi NonText ctermfg=LightBlue guifg=LightBlue guibg=White
hi Question term=standout ctermfg=LightGreen guifg=Green
hi Search term=reverse ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black
hi SpecialKey ctermfg=LightBlue guifg=Blue
hi Title ctermfg=LightMagenta guifg=Magenta
hi WarningMsg term=standout ctermfg=LightRed guifg=Red
hi WildMenu term=standout ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black
hi Folded term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=LightGrey guifg=DarkBlue
hi FoldColumn term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue
hi DiffAdd ctermbg=DarkBlue guibg=DarkBlue
hi DiffChange ctermbg=DarkMagenta guibg=DarkMagenta
hi DiffDelete ctermfg=Blue ctermbg=DarkCyan guifg=Blue guibg=DarkCyan

hi Comment ctermfg=DarkGrey guifg=DarkGreen 
hi SpecialChar ctermfg=DarkGrey guifg=DarkGrey 
hi StorageClass ctermfg=Red guifg=Red 
hi Number ctermfg=LightRed guifg=LightRed 

" Groups for syntax highlighting
hi Constant term=underline ctermfg=Magenta guifg=Red guibg=White
hi Special ctermfg=LightRed guifg=Red guibg=White
hi Statement gui=NONE guifg=DarkBlue guibg=White
hi Ignore ctermfg=Red guifg=White
endif
